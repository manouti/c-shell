/** \file GuoliceAspect.ah
*
* Contains aspect in order to procude visual got graph
*
*/


#ifndef __GuoliceAspect_ah__
#define __GuoliceAspect_ah__
//
#include "Node.h"
#include "ParseTree.h"
//
#include <cstdlib>
#include <string>
#include <vector>
#include <map>
#include <fstream>
#include <algorithm>
#include <iostream>
using namespace std;


/**
*
* Will work around 3 functions:
*traverse: after traverse has proceded will create a dot file with dot information in it. Will use dot command to translate
*visitNode: when a node is visisted, dot outout will be added, keeping color coding between the same variables
*visitEdge: create and edge in dot format
*
*/





aspect GuolicelAspect{

//
    advice execution("% ParseTree::traverse(...)"): around(){
                tjp->proceed();
                ofstream dotFile; // Output file stream for the dot file.
                dotFile.open("Graph.dot");

                dotFile << "digraph GuoliceParseGraph  {\n";
                dotFile << "graph[ordering=out];\n";
                dotFile << "\n//-------------------- Node Declarations --------------------\n";

                for(int i = 0; i <  tjp->that()->nodeDeclarations.size(); i++) {
                        dotFile <<  tjp->that()->nodeDeclarations[i];
                }

                dotFile << "\n//-------------------- Edge Declarations --------------------\n";

                for(int j = 0; j <  tjp->that()->edgeDeclarations.size(); j++) {
                        dotFile <<  tjp->that()->edgeDeclarations[j];
                }

                dotFile << "\n\n";
                dotFile << "}";
                dotFile.close();
     }



   advice execution(" % ParseTree::visitNode(...) "):around(){
        Node* node = *static_cast<Node**>(tjp->arg(0));
        string nodeDot ("node");

        ostringstream oss;
        oss << tjp->that()->dotNodeCount++;
        nodeDot += oss.str();

        tjp->that()->nodeNames[node] = nodeDot; // Store the label of the node in the dot file, e.g. node13 in the map "nodeNames".

        nodeDot += "[label=\"";

        string nodeText(node->getValue());
        replace(nodeText.begin(), nodeText.end(), '\"', '\'' );   // Replace the double-quote by a single-quote in case of a string for it to
                                                                                                                          // to be added correctly in the dot layout text.
        nodeDot += nodeText + "\",";

        switch(node->getType()) {
                case Node::VAR:
                        {
                        string variableColor;

                        string varID = tjp->that()->varIDs[node];

                        if (tjp->that()->varColors.find(varID) != tjp->that()->varColors.end()) {
                                variableColor = tjp->that()->varColors[node->getValue()];
                        }
                        else {
                                double red = (static_cast<double> (rand()) / static_cast<double> (RAND_MAX) + 1.0) / 2.0;
                                double green = (static_cast<double> (rand()) / static_cast<double> (RAND_MAX) + 1.0) / 2.0;
                                double blue = (static_cast<double> (rand()) / static_cast<double> (RAND_MAX) + 1.0) / 2.0;

                                oss.flush();
                                oss << red << " " << green << " " << blue;
                                variableColor = oss.str();

                                tjp->that()->varColors[varID] = variableColor;
                        }

                        nodeDot += "rank=sink,style=filled,color=\"" + variableColor +  "\"];\n";
                        }
                        break;
                case Node::CONST:
                        nodeDot += "shape=box];\n";
                        break;
                case Node::OP:
                         nodeDot += "shape=diamond];\n";
        }

        tjp->that()->nodeDeclarations.push_back(nodeDot);
        //dotFile << nodeDot;
}

advice execution(" % ParseTree::visitEdge(...)" )  : around()
{
        Node * parent = *static_cast<Node**>(tjp->arg(0));
        int childNumber= *static_cast<int*>(tjp->arg(1));
        string edgeDot (tjp->that()->nodeNames[parent]);
        edgeDot += " -> " + tjp->that()->nodeNames[parent->getChildren().at(childNumber)] + "[label=";

        ostringstream oss;
        oss << childNumber + 1;
        edgeDot += oss.str() + "];\n";

        tjp->that()->edgeDeclarations.push_back(edgeDot);
        //dotFile << edgeDot;
}






};




#endif
